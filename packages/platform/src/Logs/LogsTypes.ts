import { PageContent, PageDirection, Pagination, StringAnyMap, StringStringMap } from '../CommonTypes';

export interface LogConfig {
  /**EMPTY DESC*/
  levels?: StringStringMap;
  /**EMPTY DESC*/
  rootLevel?: LogLevel;
  /**EMPTY DESC*/
  sinkConfig?: LogSinkConfig;
}
export interface LogEntries {
  /**EMPTY DESC*/
  start?: number;
  /**EMPTY DESC*/
  entries?: PageContent<LogEntry>;
  /**EMPTY DESC*/
  stop?: number;
  /**EMPTY DESC*/
  page?: Pagination;
}
export interface LogEntry {
  /**EMPTY DESC*/
  resource?: string;
  /**Context ID. Clients and developers must not pass this explicitly. This value was generated by the server and passed back wy the worker SDKs.*/
  contextId?: number;
  /**server-generated timestamp*/
  timestamp?: number;
  /**For developer-defined values, tags or applicative transaction ID, etc...*/
  custom?: StringAnyMap;
  /**EMPTY DESC*/
  data?: any;
  /**EMPTY DESC*/
  logger?: string;
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
  /**EMPTY DESC*/
  level?: LogLevel;
  /**server node name*/
  node?: string;
  /**User supplied timestamp. The server will still store its own timestamp.*/
  timestampOverride?: number;
}
export enum LogLevel {
  /**missing enum desc*/
  DEBUG = 'DEBUG',
  /**missing enum desc*/
  ERROR = 'ERROR',
  /**missing enum desc*/
  TRACE = 'TRACE',
  /**missing enum desc*/
  WARN = 'WARN',
  /**missing enum desc*/
  INFO = 'INFO'
}
export interface LogListRequest {
  /**EMPTY DESC*/
  start?: number;
  /**EMPTY DESC*/
  stop?: number;
  /**EMPTY DESC*/
  page?: Pagination;
}
export interface LogRequest {
  /**EMPTY DESC*/
  resource?: string;
  /**Context ID. Clients and developers must not pass this explicitly. This value was generated by the server and passed back wy the worker SDKs.*/
  contextId?: number;
  /**For developer-defined values, tags or applicative transaction ID, etc...*/
  custom?: StringAnyMap;
  /**EMPTY DESC*/
  data?: any;
  /**EMPTY DESC*/
  logger?: string;
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
  /**EMPTY DESC*/
  level?: LogLevel;
  /**User supplied timestamp. The server will still store its own timestamp.*/
  timestampOverride?: number;
}
export interface LogSinkConfig {
  /**EMPTY DESC*/
  sinkType?: LogSinkType;
  /**EMPTY DESC*/
  sinkConfig?: StringAnyMap;
}
export enum LogSinkType {
  /**missing enum desc*/
  TODO = 'TODO',
  /**missing enum desc*/
  INTERNAL = 'INTERNAL'
}
