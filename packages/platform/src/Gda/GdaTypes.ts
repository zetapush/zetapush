import { Idempotence, PageContent, PageDirection, Pagination, StringAnyMap } from '../CommonTypes';

export interface GdaCellRequest {
  /**User field for traceability of requests. Synchronous SDK APIs use this field for you.*/
  requestId?: string;
  /**Table name*/
  table: string;
  /**Row key*/
  key: string;
  /**cell key inside the column*/
  key2: string;
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
  /**column name inside the row*/
  column: string;
}
export interface GdaCellsRequest {
  /**User field for traceability of requests. Synchronous SDK APIs use this field for you.*/
  requestId?: string;
  /**Table name*/
  table: string;
  /**Row key*/
  key: string;
  /**cell keys inside the column*/
  key2: string[];
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
  /**column name inside the row*/
  column: string;
}
export interface GdaCellsResult {
  /**Request leading to the result*/
  request?: GdaCellsRequest;
  /**Result for the specified request*/
  result?: any;
  /**User field for traceability of requests. The value was generated by the client requester.*/
  requestId?: string;
}
export interface GdaColumnRequest {
  /**User field for traceability of requests. Synchronous SDK APIs use this field for you.*/
  requestId?: string;
  /**Table name*/
  table: string;
  /**Row key*/
  key: string;
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
  /**column name inside the row*/
  column: string;
}
export interface GdaColumnSpec {
  /**Optional list of cell names*/
  key2?: string[];
  /**Mandatory column name*/
  column: string;
}
export enum GdaDataType {
  /**64-bit signed integer. This is the only eligible type for the 'inc' API call*/
  LONG = 'LONG',
  /**Character String*/
  STRING = 'STRING',
  /**Boolean value : true or false*/
  BOOLEAN = 'BOOLEAN',
  /**Floating point number*/
  DOUBLE = 'DOUBLE',
  /**Complex object*/
  OBJECT = 'OBJECT'
}
export interface GdaFilterRequest {
  /**Optional column/cell specifications of the columns/cells to retrieve*/
  columns?: GdaColumnSpec[];
  /**Start row key (inclusive)*/
  start?: string;
  /**User field for traceability of requests. Synchronous SDK APIs use this field for you.*/
  requestId?: string;
  /**Table name*/
  table: string;
  /**Stop row key (exclusive)*/
  stop?: string;
  /**Boolean predicate. The function must accept one parameter : the current row. The return value must be a boolean. When true, the row is retained, otherwise it is filtered out.*/
  function?: any;
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
  /**Pagination information*/
  page?: Pagination;
}
export interface GdaFilterResult {
  /**Request leading to the result*/
  request?: GdaFilterRequest;
  /**Result for the specified request*/
  result?: PageContent<StringAnyMap>;
  /**User field for traceability of requests. The value was generated by the client requester.*/
  requestId?: string;
}
export interface GdaGet {
  /**User field for traceability of requests. Synchronous SDK APIs use this field for you.*/
  requestId?: string;
  /**Table name*/
  table: string;
  /**Row key*/
  key: string;
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
}
export interface GdaGetResult {
  /**Request leading to the result*/
  request?: GdaGet;
  /**Result for the specified request*/
  result?: StringAnyMap;
  /**User field for traceability of requests. The value was generated by the client requester.*/
  requestId?: string;
}
export interface GdaList {
  /**Optional column/cell specifications of the columns/cells to retrieve*/
  columns?: GdaColumnSpec[];
  /**User field for traceability of requests. Synchronous SDK APIs use this field for you.*/
  requestId?: string;
  /**Table name*/
  table: string;
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
  /**Pagination information*/
  page?: Pagination;
}
export interface GdaListResult {
  /**Request leading to the result*/
  request?: GdaList;
  /**Result for the specified request*/
  result?: PageContent<StringAnyMap>;
  /**User field for traceability of requests. The value was generated by the client requester.*/
  requestId?: string;
}
export interface GdaMultiGetRequest {
  /**Optional column/cell specifications of the columns/cells to retrieve*/
  columns?: GdaColumnSpec[];
  /**User field for traceability of requests. Synchronous SDK APIs use this field for you.*/
  requestId?: string;
  /**Table name*/
  table: string;
  /**List of wanted row keys*/
  keys: string[];
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
}
export interface GdaMultiGetResult {
  /**Request leading to the result*/
  request?: GdaMultiGetRequest;
  /**Result for the specified request*/
  result?: StringAnyMap[];
  /**User field for traceability of requests. The value was generated by the client requester.*/
  requestId?: string;
}
export interface GdaPut {
  /**User field for traceability of requests. Synchronous SDK APIs use this field for you.*/
  requestId?: string;
  /**Table name*/
  table: string;
  /**stored data*/
  data: any;
  /**Row key*/
  key: string;
  /**optional cell key inside the column*/
  key2?: string;
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
  /**column name inside the row*/
  column: string;
}
export interface GdaPuts {
  /**Rows to be inserted*/
  rows: GdaPutsRow[];
  /**User field for traceability of requests. Synchronous SDK APIs use this field for you.*/
  requestId?: string;
  /**Table name*/
  table: string;
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
}
export interface GdaPutsResult {
  /**Number of inserted rows*/
  inserted?: number;
  /**User field for traceability of requests. Synchronous SDK APIs use this field for you.*/
  requestId?: string;
  /**Table name*/
  table: string;
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
}
export interface GdaPutsRow {
  /**Stored data, as a map of columns to values*/
  data: StringAnyMap;
  /**Row key*/
  key: string;
}
export interface GdaRange {
  /**Optional column/cell specifications of the columns/cells to retrieve*/
  columns?: GdaColumnSpec[];
  /**Start row key (inclusive)*/
  start: string;
  /**User field for traceability of requests. Synchronous SDK APIs use this field for you.*/
  requestId?: string;
  /**Table name*/
  table: string;
  /**Stop row key (exclusive)*/
  stop: string;
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
  /**Pagination information*/
  page?: Pagination;
}
export interface GdaRangeResult {
  /**Request leading to the result*/
  request?: GdaRange;
  /**Result for the specified request*/
  result?: PageContent<StringAnyMap>;
  /**User field for traceability of requests. The value was generated by the client requester.*/
  requestId?: string;
}
export interface GdaReduceRequest {
  /**Optional column/cell specifications of the columns/cells to retrieve*/
  columns?: GdaColumnSpec[];
  /**Start row key (inclusive)*/
  start: string;
  /**Initial value for the computation function. Example : {sum:0, mean:null}*/
  initialValue?: StringAnyMap;
  /**User field for traceability of requests. Synchronous SDK APIs use this field for you.*/
  requestId?: string;
  /**Table name*/
  table: string;
  /**Stop row key (exclusive)*/
  stop: string;
  /**Computation function. The function must accept two parameters : the current value and the current row. The return value is ignored : the current value must be updated instead.*/
  function?: any;
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
  /**Pagination information*/
  page?: Pagination;
}
export interface GdaReduceResult {
  /**Request leading to the result*/
  request?: GdaReduceRequest;
  /**Result for the specified request*/
  result?: StringAnyMap;
  /**User field for traceability of requests. The value was generated by the client requester.*/
  requestId?: string;
}
export interface GdaRemoveColumns {
  /**List of column names*/
  columns: string[];
  /**Table name*/
  name: string;
}
export interface GdaRemoveRange {
  /**Optional column/cell specifications of the columns/cells to retrieve*/
  columns?: GdaColumnSpec[];
  /**Start row key*/
  start: string;
  /**User field for traceability of requests. Synchronous SDK APIs use this field for you.*/
  requestId?: string;
  /**Table name*/
  table: string;
  /**Stop row key*/
  stop: string;
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
}
export interface GdaRowRequest {
  /**User field for traceability of requests. Synchronous SDK APIs use this field for you.*/
  requestId?: string;
  /**Table name*/
  table: string;
  /**Row key*/
  key: string;
  /**Optional User key. When calling the API, defaults to the current (calling) user's primary key. For impersonation purposes, the caller may use the key of another user, provided that the proper authorizations have been given by the impersonated user*/
  owner?: string;
}
export interface GdaTableColumn {
  /**Column type*/
  type: GdaDataType;
  /**Column name*/
  name: string;
  /**False if the column contains a single piece of data or true when it can contain several data, mapped by (sub-)keys. Defaults to 'false'*/
  map?: boolean;
}
export interface GdaTableModification {
  /**List of column specifications*/
  columns: GdaTableColumn[];
  /**Table name*/
  name: string;
  /**Specify the behavior when the table already exists. The default value is IGNORE_DIFFERENT.IGNORE_IDENTICAL ignores all pre-existing (identical or additional) columns, but does not allow to change or add columns.IGNORE_DIFFERENT ignores all pre-existing (identical or additional) columns, can add columns, but does not allow to change column types.*/
  idempotence?: Idempotence;
}
export interface GdaTableRemoval {
  /**Table name*/
  name: string;
}
export interface GdaTableStructure {
  /**List of column specifications*/
  columns: GdaTableColumn[];
  /**Table name*/
  name: string;
}
